Practice Questions
Q: 1. What is the function that creates Regex objects?
re.compile()


Q: 2. Why are raw strings often used when creating Regex objects?
because the need to use \ (escape character)


Q: 3. What does the search() method return?
the first match


Q: 4. How do you get the actual strings that match the pattern from a Match
object?
.search() and .findall()


Q: 5. In the regex created from r'(\d\d\d)-(\d\d\d-\d\d\d\d)', what does group 0
cover? Group 1? Group 2?
0 = (\d\d\d)-(\d\d\d-\d\d\d\d)
1 = (\d\d\d)
2 = (\d\d\d-\d\d\d\d)


Q: 6. Parentheses and periods have specific meanings in regular expression
syntax. How would you specify that you want a regex to match actual
parentheses and period characters?
\( or \. (escape character)


Q: 7. The findall() method returns a list of strings or a list of tuples of strings.
What makes it return one or the other?
.search()


Q: 8. What does the | character signify in regular expressions?
Pipe


Q: 9. What two things does the ? character signify in regular expressions?
Optional match after the group preceding the ?
“Match zero or one of the group preceding this question mark.”
ie: (wo)?

it also denotes a 'non-greedy' match. Which takes the least characters as opposed to most.


Q: 10. What is the difference between the + and * characters in regular
expressions?
* = match zero or more
+ = match one or more


Q: 11. What is the difference between {3} and {3,5} in regular expressions?
{3} will match only three, {3, 5} will match three to five


Q: 12. What do the \d, \w, and \s shorthand character classes signify in regular
expressions?
digits from 0-9, Any letter, numeric digit, or the underscore character. (Think of
this as matching “word” characters.) , space/tab/new line


Q: 13. What do the \D, \W, and \S shorthand character classes signify in regular
expressions?
any char that is NOT a digit, any character that is NOT a digit/letter/or the underscore, any char that is NOT a space
tab or new line


Q: 14. How do you make a regular expression case-insensitive?
add 're.I' or 're.IGNORECASE' after re.compile
ie: robocop = re.compile(r'robocop', re.I)


Q: 15. What does the . character normally match? What does it match if
re.DOTALL is passed as the second argument to re.compile()?
wildcard, could be anything


Q: 16. What is the difference between .* and .*??
with the '?' it is a non greedy version


Q: 17. What is the character class syntax to match all numbers and lowercase
letters?
[a-z


Q: 18. If numRegex = re.compile(r'\d+'), what will numRegex.sub('X', '12 drummers,
11 pipers, five rings, 3 hens') return?
12 drummers, 11 pipers, 3 hens

Q: 19. What does passing re.VERBOSE as the second argument to re.compile()
allow you to do?
ignore whitespace and comments inside the regular expression string, for multiline use
123,123



Q: 20. How would you write a regex that matches a number with commas for
every three digits? It must match the following:
'42'
'1,234'
'6,368,745'
but not the following:
'12,34,567' (which has only two digits between the commas)
'1234' (which lacks commas)
re.compile(r'^\d\{1,3}(,{3})*$)

(r'^\d{1,3}(,{3})*$')


Q: 21. How would you write a regex that matches the full name of someone
whose last name is Nakamoto? You can assume that the first name that
comes before it will always be one word that begins with a capital letter. The
regex must match the following:
'Satoshi Nakamoto'
'Alice Nakamoto'
'Robocop Nakamoto'
but not the following:
'satoshi Nakamoto' (where the first name is not capitalized)
'Mr. Nakamoto' (where the preceding word has a nonletter character)
'Nakamoto' (which has no first name)
'Satoshi nakamoto' (where Nakamoto is not capitalized)



Q: 22. How would you write a regex that matches a sentence where the first
word is either Alice, Bob, or Carol; the second word is either eats, pets, or
throws; the third word is apples, cats, or baseballs; and the sentence ends
with a period? This regex should be case-insensitive. It must match the
following:
'Alice eats apples.'
'Bob pets cats.'
'Carol throws baseballs.'
'Alice throws Apples.'
'BOB EATS CATS.'
but not the following:
'Robocop eats apples.'
'ALICE THROWS FOOTBALLS.'
'Carol eats 7 cats.'
re.compile(r'(Alice|Bob|Carol)\s(eats|pets|throws)\s(apples|cats|baseballs)\.', reIGNORECASE)