Q: 1. Why are functions advantageous to have in your programs?
Because they can be used multiple times to reduce duplicate code.


Q: 2. When does the code in a function execute: when the function is defined or
when the function is called?

called


Q: 3. What statement creates a function?
def

Q: 4. What is the difference between a function and a function call?
A function consists of the def statement and the code in its def clause.
A function call is what moves the program execution into the function, and the function call evaluates to the functionâ€™s
return value.


Q: 5. How many global scopes are there in a Python program? How many local
scopes?
1 global scope and a local scope is created whenever a function is called.


Q: 6. What happens to variables in a local scope when the function call returns?
They are destroyed and forgotten


Q: 7. What is a return value? Can a return value be part of an expression?
The value returned from a function. Yes, like any value.


Q: 8. If a function does not have a return statement, what is the return value of a
call to that function?
None


Q: 9. How can you force a variable in a function to refer to the global variable?
make a global statement before you use the variable,

global eggs
eggs = 'spam'


Q: 10. What is the data type of None?
NoneType



Q: 11. What does the import areallyourpetsnamederic statement do?
imports the module areallyourpetsnamederic



Q: 12. If you had a function named bacon() in a module named spam, how would
you call it after importing spam?

spam.bacon()



Q: 13. How can you prevent a program from crashing when it gets an error?
try and except clause


Q: 14. What goes in the try clause? What goes in the except clause?
The try clause goes before a potential error.
The except clause contains the error name followed by what to do if the error is found

