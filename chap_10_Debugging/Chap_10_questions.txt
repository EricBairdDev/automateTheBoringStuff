Q: 1. Write an assert statement that triggers an AssertionError if the variable spam is
an integer less than 10.

assert spam > 10, 'Spam must be less than 10'

Q: 2. Write an assert statement that triggers an AssertionError if the variables eggs
and bacon contain strings that are the same as each other, even if their cases
are different (that is, 'hello' and 'hello' are considered the same, and
'goodbye' and 'GOODbye' are also considered the same).

assert spam.lower() != eggs.lower(), 'Triggered'

Q: 3. Write an assert statement that always triggers an AssertionError.
assert(False, 'This assertion always triggers.')


Q: 4. What are the two lines that your program must have in order to be able to
call logging.debug()?

import logging
logging.basicConfig(level=logging.DEBUG, format=' %(asctime)s - % (levelname)s - %(message)s')

Q: 5. What are the two lines that your program must have in order to have
logging.debug() send a logging message to a file named programLog.txt?

import logging
logging.basicConfig(filename='myProgramLog.txt', level=logging.DEBUG, format=' %(asctime)s - %(levelname)s - %(message)s')

Q: 6. What are the five logging levels?
DEBUG
INFO
WARNING
ERROR
CRITICAL


Q: 7. What line of code can you add to disable all logging messages in your
program?

logging.disable(logging.CRITICAL)

Q: 8. Why is using logging messages better than using print() to display the
same message?

because then you have to go around and remove them, may miss some etc...

Q: 9. What are the differences between the Step, Over, and Out buttons in the
Debug Control window?

STep
Clicking the Step button will cause the debugger to execute the next
line of code and then pause again. The Debug Control window’s list of
global and local variables will be updated if their values change. If the
next line of code is a function call, the debugger will “step into” that
function and jump to the first line of code of that function.

Over
Clicking the Over button will execute the next line of code, similar to
the Step button. However, if the next line of code is a function call, the
Over button will “step over” the code in the function. The function’s
code will be executed at full speed, and the debugger will pause as
soon as the function call returns. For example, if the next line of code
is a print() call, you don’t really care about code inside the built-in
print() function; you just want the string you pass it printed to the
screen. For this reason, using the Over button is more common than
the Step button.

Out
Clicking the Out button will cause the debugger to execute lines of
code at full speed until it returns from the current function. If you have
stepped into a function call with the Step button and now simply want
to keep executing instructions until you get back out, click the Out
button to “step out” of the current function call.

Q: 10. After you click Go in the Debug Control window, when will the debugger
stop?

at the breakpoint


Q: 11. What is a breakpoint?

The line of code you want the dbugger to stop at.


Q: 12. How do you set a breakpoint on a line of code in IDLE?
